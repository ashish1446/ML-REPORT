{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing necessary libraries\n",
    "import numpy  as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the MNIST dataset\n",
    "\n",
    "from sklearn.datasets import fetch_openml\n",
    "mnist = fetch_openml(name='mnist_784')\n",
    "images = mnist.data\n",
    "labels = [int(k) for k in mnist.target]\n",
    "labels = np.array(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualization demo\n",
    "\n",
    "#plt.figure(figsize=(4,4))\n",
    "plt.imshow(images[1].reshape(28,28));\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = np.cov(images.T) #covariance matrix\n",
    "eigvals, eigvecs = np.linalg.eig(cov)\n",
    "\n",
    "index = eigvals.argsort()[::-1]  \n",
    "\n",
    "eigvals = eigvals[index]\n",
    "eigvecs = eigvecs[index,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f3e6aa85198>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(eigvecs[0].reshape(28,28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components=2)\n",
    "#X=pca.fit(images)\n",
    "Y = pca.transform(images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fbeef177048>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAASbklEQVR4nO3dXYxc5XkH8P9/Zmc/vDb+iMFdsIEUWa3cpjiRi6KCKkeRkIkqmVwUBaWVLyI5F6AGiRuUG3JTlZtAVClK5QgLt0pASIHiSlYby41EkkpRNggFg0NxiAk4ixd/4I+1vbsz8/Rij9PFeN7n9c6ZM7N5/j/J2vWcs+c858z89+zOefZ9aWYQkT98tX4XICLVUNhFglDYRYJQ2EWCUNhFghiqcmeNkXEbGV+XXOdPN32QXH6q5Zc8dWatu05t3l0FjbNzyeWtlcPuNtoZZ3hoeia5nEN1dxuzG0bdddjya2nckD5m/sa/e9Me88/L3Jr0cjbpbqO2oumug3P+E8DVznZO+dtorvBLyXnNDa9On//mqfS5nb1wGs3LM9c8eZWGfWR8HT517yPJdX76rX9JLv/Xc+vd/fzTcw+464xOu6vg5v/4bXL5mbs3utu4eJP/w9OGf/6f5PL6mvQ3SAA4+g9/4q4zfMYP0MS976a38Xf+K/binZvcdY7tTNcyfNL/Brdy6yl3ndZB//Uydt+J9Ar/dqO7jQ8+466CFVP+a2Hj3xxLLj+577bk8iP7n+q4rKsf40nuIPkmyaMkH+tmWyLSW0sOO8k6gG8DuA/AFgAPktxSVmEiUq5urux3AThqZm+b2RyA5wDsLKcsESlbN2G/BcDiX/DeKx77CJK7SU6SnJyfTb8RJSK90/Nbb2a2x8y2mdm2xsh4r3cnIh10E/bjABa/7bqxeExEBlA3Yf85gM0kP0lyGMCXAOwvpywRKduS77ObWZPkwwD+C0AdwF4zez31NWwbGjPpzo6/fCV9j/zk9A1ubaN/dt5dBydXuau8/WS6OWfkZf97pWV8O5169K+Sy4c/9BtZmNGwcXm9v50LT3/sbZePOPFEuukDAFYcabjrsJ1+HczfOutu4+x5v5NlzUzGMf/3huTyVa22u432ev8JaH444q7z7oHbk8tHa87xJNoXumqqMbMDAA50sw0RqYZ640WCUNhFglDYRYJQ2EWCUNhFglDYRYKo9O/Z59YCv/3b9D3LiX3pe9urvnzO3c+lN52REQC0/VvBWPNCur135mZ/G3X/djFm/ih973Rutb+N+dX+veChGy+765yeS9+7XvtT/17xmU/5o2SsOpr+e/Xzd7ibgGUMcHFus7+d1f+bPv8n7/T3Uz/hD9gxfNavpeH0BcxMpGtpJV7XurKLBKGwiwShsIsEobCLBKGwiwShsIsEobCLBKGwiwRRaVNN7TIx/ka6KeOs00wx8zt/0Ams9ps6LjT873PNsfQ6db9HBTN3Zwyy+Zt0I8vszf7ACGPHMman+dAf7IGtdNPGhVv9wSDGpvwJHprOBDaNs/7zM7/GbyTKmAQHF25N78uG/GNunPUbbywjbRc2prez7kj6iN5LvCZ1ZRcJQmEXCUJhFwlCYRcJQmEXCUJhFwlCYRcJQmEXCaLSphq0gZozcsu5P083kIwd84eYaa3wmyDql/0mCG80m+a4vx97x29kacykaxl/xW+YmdmUUYvf64LanLOdzX6T0OXf+ce88lj6OlNzmnsAoDXqr1Ob89eZc5pzhpznBwCaq/zzP5/RD+Y9Ryf/In3emj/pvExXdpEgFHaRIBR2kSAUdpEgFHaRIBR2kSAUdpEgFHaRIKptqqkBTaffYuyddCfL5Ql/7JHR9/3ukVrTXQWza9ONEs1P+CPIDJ32m4DmnYYMmt/UccOv3VVw/jZ/He/bv/06PSUWANQzLiHzK9PLZz/hj0IzfC5ntCG/2WXkZDXXvPZwRrPXpfRzPXoqvY3aXOdlXYWd5DEA57Ew+k/TzLZ1sz0R6Z0yruyfM7OTJWxHRHpIv7OLBNFt2A3AD0n+guTua61AcjfJSZKTzYsZI62KSE90+2P8PWZ2nORNAA6S/JWZvbx4BTPbA2APAIxNZPxploj0RFdXdjM7XnycBvAigLvKKEpEyrfksJMcJ7nqyucA7gVwuKzCRKRc3fwYvwHAiySvbOf7ZvafqS+wOjB/Q/on+cb59H1GG86YBcSZyQUAmDEgAZ1dNab9e+gr3vf3c+km57ebjF9+Ltzqr5MzeIU7qEfG5WEo462ZudXpgxr9wN/R7Hr/tZAzSMn8ynQtQ869bwAYuuiugrY/BgmGnFmG5tY4+UgkeslhN7O3Ady51K8XkWrp1ptIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEJUOXmH0/4DfaummgcYpv+R2zswnGYNXeA0ZXtMNAMzc7HfEeE0bOTPP5Mx8Us84Zu/5aY1kbMPvNcLQBac5JOM5HP7Qv1a1Rv1z13BqqTuzGAF5x9wc89dpjaTrXXUs/fVMjO2iK7tIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBCVNtXUmsDYifT3lzlvJJtzfvPI3Bq/kcIbKQXwGyVGP/BrMfrrtFY4I6VkjKqT0zzCpr+d2rzT1HTB3QTql/x15lanl6eaQ/5/pYxaLmas5KzivSYBYChjP17zDgDMr0p3allt6ddnXdlFglDYRYJQ2EWCUNhFglDYRYJQ2EWCUNhFgqh88IrmaHqdmnMvuJEx28jlG/37ojkDH7SdgRpyBiOozfvr2Gz6mL0ZS4C8+9K1jJllvHot47Z1c9xfx5tBpT7nb+NSxvOccy+erfRKw84sRQAwn3HMdWe2FwDuCb44kT7mVG+IruwiQSjsIkEo7CJBKOwiQSjsIkEo7CJBKOwiQSjsIkFU2lRD85s22sPp5bPr/P14M6wAgGUcuTldKMzoMGFG34e3Ut42MtbJmMHGGwTDmyUnlzcwyOX1GY1RGQOZIOfcOS7d5J+44TMZTVoZs8Y0nIFK6M3qkzheXdlFgnDDTnIvyWmShxc9to7kQZJvFR/X9rZMEelWzpX9GQA7rnrsMQCHzGwzgEPF/0VkgLlhN7OXAZy+6uGdAPYVn+8DcH/JdYlIyZb6O/sGM5sqPn8fwIZOK5LcTXKS5GTzYsafrIlIT3T9Bp2ZGRLvAZrZHjPbZmbbhlZk/B2giPTEUsN+guQEABQfp8srSUR6Yalh3w9gV/H5LgAvlVOOiPSK21pC8lkA2wGsJ/kegMcBPAHgeZJfAfAOgAdydmY1oOWNVOM03WTNFJLRYdJ0ZmEBgLrTnNNudD+rDAC33Kxjzhm0JWc7te5HzcmawWas+26Xdk5LWAmdJI0L/kayZuRpZ8zI443Q08XxuKfLzB7ssOjzS9+tiFRNHXQiQSjsIkEo7CJBKOwiQSjsIkEo7CJBKOwiQVQ6Ug0AWN0ZlcWZCsmbkgkA2kPlTJfUHul+1Jac5h1v9BFvSiwgoxkD/ihAANB2np+68/wAADNGxPGOyXKew5y+nIzn2Tv/OY1RwxfLmSLKPSbneFJfryu7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBCV32dny7mP7twL9u4D5+wDAGrezBrwB6fIGbwih3dv1etNAAAbqub+d84gGTmz7bgDdmTUmjPDTU5vQc3ZTs7z3MqYHag+69fS8vpInBeLJS7furKLBKGwiwShsIsEobCLBKGwiwShsIsEobCLBKGwiwQxcINX1J3ZRGzM34c3qwyQbj64wmvOydlGbb6cmUI8Vs9YJ2M3XrNRzjHnNN54DTHebDxA3qwytTl/Oznnzq1lOGOGoYzBTrwGnnrG8XSiK7tIEAq7SBAKu0gQCrtIEAq7SBAKu0gQCrtIEAq7SBCVN9V4I6F4M77kjELTGi1nBBmv1qzRVLwhWeDPYJMzC0vOzDM52/EaTHJm0sk6/865y2k0ynkt5Mwa4zXE1OYznsOMppqc8+I23nRxeXa/lORektMkDy967Bskj5N8tfj3haWXICJVyPk+8QyAHdd4/Ckz21r8O1BuWSJSNjfsZvYygNMV1CIiPdTNG3QPk/xl8WP+2k4rkdxNcpLkZGtmpovdiUg3lhr27wC4A8BWAFMAvtlpRTPbY2bbzGxbfTxjzloR6Yklhd3MTphZy8zaAL4L4K5yyxKRsi0p7CQnFv33iwAOd1pXRAaDe5+d5LMAtgNYT/I9AI8D2E5yKxaGKTgG4Ks9rFFESuCG3cwevMbDTy9pb5bXlJGSMyKIO4URAGaMZuP93JPTJDHkjLxTVNP1fnJGMMk6997sTxmHk7Mft2kmoxkmp6mpndE25r1eckayyWnwyVLC+e9E7bIiQSjsIkEo7CJBKOwiQSjsIkEo7CJBKOwiQVQ7eAWB1kh3A0vkzPCRMV4ErIQjz6ml3ahmPznHnLOOd1/amzEGAJDR55BVryNrVp+cAUacl2TOABhV6aYWXdlFglDYRYJQ2EWCUNhFglDYRYJQ2EWCUNhFglDYRYKotqnGMmbX8P5435k9BcibTcSbkQSA/60wZ+KTjHrdc5LxLTlrUIMSBp7IaWTJOS+lKGm8CHc7OceTU0sJ27Ha0k+uruwiQSjsIkEo7CJBKOwiQSjsIkEo7CJBKOwiQSjsIkFUPlKN15ThjSxS1cwbZW2jllNvCbVkjchSUuPNstkGUE5DTFkNMyXIahjrQFd2kSAUdpEgFHaRIBR2kSAUdpEgFHaRIBR2kSCqvc+OEmbXqPL+axXbAMo7pjKUMZBDDm87VZ6TMo6pqnq9WhPLdWUXCcINO8lNJH9E8g2Sr5P8WvH4OpIHSb5VfFzb+3JFZKlyruxNAI+a2RYAnwXwEMktAB4DcMjMNgM4VPxfRAaUG3YzmzKzV4rPzwM4AuAWADsB7CtW2wfg/l4VKSLdu67f2UneDuDTAH4GYIOZTRWL3gewocPX7CY5SXKyNTPTRaki0o3ssJNcCeAHAB4xs3OLl5mZocP7gGa2x8y2mdm2+vh4V8WKyNJlhZ1kAwtB/56ZvVA8fILkRLF8AsB0b0oUkTLkvBtPAE8DOGJmTy5atB/AruLzXQBeKr88ESlLTlPN3QD+HsBrJF8tHvs6gCcAPE/yKwDeAfBAKRVVNTvHAA1IMFD+kBpMyjJITU9dcMNuZj9B58P9fLnliEivqINOJAiFXSQIhV0kCIVdJAiFXSQIhV0kCIVdJIhqR6rp2EHfg/1UoazGnKpGbSmjIamM48lRVvNUVaqqt4vZa3RlFwlCYRcJQmEXCUJhFwlCYRcJQmEXCUJhFwlCYRcJotqmGqL7xoIqmy26mGrn9wZpRJwqmjpyLafpt6qa8qrH+9CVXSQIhV0kCIVdJAiFXSQIhV0kCIVdJAiFXSSIwRu8oos/zr/uWqowSAM5LKf7+WXtp6rBQ6p6jjR4hYh4FHaRIBR2kSAUdpEgFHaRIBR2kSAUdpEgFHaRIGhWVacFQPIDAO8semg9gJOVFdC95VTvcqoVWF71DnKtt5nZjddaUGnYP7ZzctLMtvWtgOu0nOpdTrUCy6ve5VTrYvoxXiQIhV0kiH6HfU+f93+9llO9y6lWYHnVu5xq/b2+/s4uItXp95VdRCqisIsE0bewk9xB8k2SR0k+1q86cpA8RvI1kq+SnOx3PVcjuZfkNMnDix5bR/IgybeKj2v7WeNiHer9BsnjxTl+leQX+lnjFSQ3kfwRyTdIvk7ya8XjA3t+O+lL2EnWAXwbwH0AtgB4kOSWftRyHT5nZlsH9P7qMwB2XPXYYwAOmdlmAIeK/w+KZ/DxegHgqeIcbzWzAxXX1EkTwKNmtgXAZwE8VLxWB/n8XlO/rux3AThqZm+b2RyA5wDs7FMty56ZvQzg9FUP7wSwr/h8H4D7Ky0qoUO9A8nMpszsleLz8wCOALgFA3x+O+lX2G8B8O6i/79XPDaoDMAPSf6C5O5+F5Npg5lNFZ+/D2BDP4vJ9DDJXxY/5g/cj8UkbwfwaQA/wzI8v3qDLs89ZvYZLPza8RDJv+53QdfDFu6vDvo91u8AuAPAVgBTAL7Z33I+iuRKAD8A8IiZnVu8bJmc376F/TiATYv+v7F4bCCZ2fHi4zSAF7Hwa8igO0FyAgCKj9N9rifJzE6YWcvM2gC+iwE6xyQbWAj698zsheLhZXV+gf6F/ecANpP8JMlhAF8CsL9PtSSRHCe56srnAO4FcDj9VQNhP4Bdxee7ALzUx1pcV4JT+CIG5ByTJICnARwxsycXLVpW5xfoYwddcWvlWwDqAPaa2T/2pRAHyT/GwtUcWBhn//uDVivJZwFsx8KfXp4A8DiAfwfwPIBbsfBnxQ+Y2UC8Kdah3u1Y+BHeABwD8NVFvxP3Dcl7APwYwGsA2sXDX8fC7+0DeX47UbusSBB6g04kCIVdJAiFXSQIhV0kCIVdJAiFXSQIhV0kiP8Dc/3TJylfZRYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(Y[700].reshape(25,25))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
